id: com.valvesoftware.Steam.CompatibilityTool.Proton
default-branch: stable
runtime: com.valvesoftware.Steam
runtime-version: stable
sdk: org.freedesktop.Sdk//20.08
build-extension: true
appstream-compose: false

sdk-extensions:
  - org.freedesktop.Sdk.Compat.i386
  - org.freedesktop.Sdk.Extension.toolchain-i386
  - org.freedesktop.Sdk.Extension.mingw-w64
  - org.freedesktop.Sdk.Extension.rust-stable

build-options:
  prefix: /app/share/steam/compatibilitytools.d/Proton
  append-path: /usr/lib/sdk/mingw-w64/bin:/app/share/steam/compatibilitytools.d/Proton/bin
  ldflags: -L/app/share/steam/compatibilitytools.d/Proton/lib
  env:
    C_INCLUDE_PATH: /app/share/steam/compatibilitytools.d/Proton/include:/app/include
    CPLUS_INCLUDE_PATH: /app/share/steam/compatibilitytools.d/Proton/include:/app/include
    PKG_CONFIG_PATH: "/app/share/steam/compatibilitytools.d/Proton/lib/pkgconfig\
                     :/app/lib/pkgconfig\
                     :/app/share/pkgconfig\
                     :/usr/lib/x86_64-linux-gnu/pkgconfig\
                     :/usr/share/pkgconfig"
    LD_RUN_PATH: /app/share/steam/compatibilitytools.d/Proton/lib
    PYTHONPATH: /app/share/steam/compatibilitytools.d/Proton/lib/python3.8/site-packages
  cflags: &optflags -O2 -pipe -march=nocona -mtune=core-avx2 -mfpmath=sse -fwrapv -fno-strict-aliasing
  cflags-override: true
  cxxflags: *optflags
  cxxflags-override: true

x-compat-i386-opts: &compat_i386_opts
  ldflags: -L/app/share/steam/compatibilitytools.d/Proton/lib32 -L/app/lib32
  prepend-path: /app/share/steam/compatibilitytools.d/Proton/bin32
  append-path: /usr/lib/sdk/toolchain-i386/bin
  env:
    CC: ccache i686-unknown-linux-gnu-gcc
    CXX: ccache i686-unknown-linux-gnu-g++
    PKG_CONFIG_PATH: "/app/share/steam/compatibilitytools.d/Proton/lib32/pkgconfig\
                     :/app/lib32/pkgconfig\
                     :/app/share/pkgconfig\
                     :/usr/lib/i386-linux-gnu/pkgconfig\
                     :/usr/share/pkgconfig"
    LD_RUN_PATH: /app/share/steam/compatibilitytools.d/Proton/lib32
  libdir: /app/share/steam/compatibilitytools.d/Proton/lib32

x-proton-source: &proton_source
  type: git
  url: "https://github.com/ValveSoftware/Proton.git"
  tag: proton-5.13-4
  commit: 54ab99b94782d3b80b44929ccba546f75d9e6fc2

cleanup:
  - "*.a"
  - "*.la"
  - /include
  - /lib/pkgconfig
  - /lib32/pkgconfig
  - /lib/cmake
  - /lib32/cmake
  - /share/man

  - /bin/function_grep.pl
  - /bin/widl
  - /bin/winebuild
  - /bin/winecpp
  - /bin/winedump
  - /bin/wineg++
  - /bin/winegcc
  - /bin/winemaker
  - /bin/wmc
  - /bin/wrc

  - /lib/wine/*.def
  - /lib32/wine/*.def
modules:

  - name: FAudio
    subdir: FAudio
    buildsystem: cmake-ninja
    builddir: true
    config-opts: &FAudio-config-opts
      - -DGSTREAMER=ON
    sources:
      - *proton_source

  - name: FAudio-32bit
    subdir: FAudio
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
    buildsystem: cmake-ninja
    builddir: true
    config-opts: *FAudio-config-opts
    sources:
      - *proton_source


  - name: jxrlib
    subdir: jxrlib
    buildsystem: cmake-ninja
    builddir: true
    build-options:
      config-opts:
        - -DJXRLIB_INSTALL_LIB_DIR=lib
    config-opts: &jxrlib-config-opts
      - -DCMAKE_INSTALL_RPATH=$ORIGIN
    cleanup:
      - /bin
    sources:
      - *proton_source

  - name: jxrlib-32bit
    subdir: jxrlib
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
      config-opts:
        - -DJXRLIB_INSTALL_LIB_DIR=lib32
    buildsystem: cmake-ninja
    builddir: true
    config-opts: *jxrlib-config-opts
    cleanup:
      - /bin
    sources:
      - *proton_source


  - name: wine
    subdir: wine
    build-options:
      arch:
        x86_64:
          config-opts:
            - --enable-win64
            - --with-mingw=ccache x86_64-w64-mingw32-gcc
          libdir: /app/share/steam/compatibilitytools.d/Proton/lib
    config-opts: &wine_common_opts
      - --disable-win16
      - --disable-tests
      - --with-x
      - --with-pulse
      - --with-dbus
      - --without-hal
      - --without-oss
      #FIXME remove once vkd3d is removed from Steam bundle
      - --without-vkd3d
      - --with-jxrlib
      - JXRLIB_CFLAGS=-I/app/share/steam/compatibilitytools.d/Proton/include/jxrlib
    make-install-args: &wine_common_make_install_args
      - LDCONFIG=/bin/true
      - UPDATE_DESKTOP_DATABASE=/bin/true
      - INSTALL_PROGRAM_FLAGS=-s
    sources: &wine_sources
      - *proton_source
      - type: patch
        dest: wine
        paths:
          - patches/wine/seccomp-external-filter.patch

  - name: wine-32bit
    subdir: wine
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
      config-opts:
        - --bindir=/app/share/steam/compatibilitytools.d/Proton/bin32
        - --with-mingw=ccache i686-w64-mingw32-gcc
    config-opts: *wine_common_opts
    make-install-args: *wine_common_make_install_args
    post-install:
      - mv $FLATPAK_DEST/bin32/{wine,wine-preloader} $FLATPAK_DEST/bin/
    cleanup:
      - /bin32
    sources: *wine_sources


  - name: media-converter
    subdir: media-converter
    build-options:
      append-path: /usr/lib/sdk/rust-stable/bin
      env:
        CARGO_HOME: /run/build/media-converter/media-converter/cargo
        RUST_TARGET: x86_64-unknown-linux-gnu
        LIBDIR: lib
    buildsystem: simple
    build-commands: &media_converter_build_commands
      - cargo --offline fetch --manifest-path Cargo.toml
      - cargo --offline build --target ${RUST_TARGET} --release
      - install -Dm755 -t ${FLATPAK_DEST}/$LIBDIR/gstreamer-1.0 target/${RUST_TARGET}/release/libprotonmediaconverter.so
    sources: &media_converter_sources
      - *proton_source
      - type: file
        path: files/media-converter/Cargo.lock
        dest: media-converter
      - type: file
        path: files/media-converter/config.toml
        dest: media-converter/.cargo
      - files/media-converter/generated-sources.json

  - name: media-converter-32bit
    subdir: media-converter
    build-options:
      append-path: /usr/lib/sdk/rust-stable/bin
      arch:
        x86_64: *compat_i386_opts
      env:
        CARGO_HOME: /run/build/media-converter-32bit/media-converter/cargo
        PKG_CONFIG_ALLOW_CROSS: "1"
        RUST_TARGET: i686-unknown-linux-gnu
        LIBDIR: lib32
    buildsystem: simple
    build-commands: *media_converter_build_commands
    sources: *media_converter_sources


  - name: lsteamclient
    subdir: lsteamclient
    build-options:
      cxxflags: -Wno-attributes
      config-opts:
        - -L${FLATPAK_DEST}/lib
        - -L${FLATPAK_DEST}/lib/wine
    config-opts: &lsteamclient_config_opts
      - --nosource-fix
      - --nolower-include
      - --nodlls
      - --nomsvcrt
      - -I${FLATPAK_DEST}/include
      - -I${FLATPAK_DEST}/include/wine
      - -I${FLATPAK_DEST}/include/wine/windows
      - -I../wine/include
      - -DSTEAM_API_EXPORTS
      - -Dprivate=public
      - -Dprotected=public
      - --dll
      - .
    make-args:
      - LIBRARIES=-ldl
    no-make-install: true
    post-install:
      - install -Dm755 lsteamclient.dll.so -t ${FLATPAK_DEST}/lib/wine/
    sources: &lsteamclient_sources
      - *proton_source
      - type: file
        path: winemaker-configure.sh
        dest: lsteamclient
        dest-filename: configure

  - name: lsteamclient-32bit
    subdir: lsteamclient
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
      cxxflags: -Wno-attributes
      config-opts:
        - -L${FLATPAK_DEST}/lib32
        - -L${FLATPAK_DEST}/lib32/wine
        - --wine32
      make-args: &winemaker_m32_make_args
        - CC=winegcc -m32
        - CXX=wineg++ -m32
    config-opts: *lsteamclient_config_opts
    make-args:
      - LIBRARIES=-ldl
    no-make-install: true
    post-install:
      - install -Dm755 lsteamclient.dll.so -t ${FLATPAK_DEST}/lib32/wine/
    sources: *lsteamclient_sources


  - name: libsteam_api-bin-32bit
    #WARNING proprietary
    build-options:
      strip: false
      no-debuginfo: true
    subdir: steam_helper
    buildsystem: simple
    build-commands:
      - install -Dm755 libsteam_api.so -t ${FLATPAK_DEST}/lib32/
    sources:
      - *proton_source


  - name: steam_helper-32bit
    subdir: steam_helper
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
    config-opts:
      - --nosource-fix
      - --nolower-include
      - --nodlls
      - --nomsvcrt
      - --wine32
      - -I${FLATPAK_DEST}/include
      - -I${FLATPAK_DEST}/include/wine
      - -I${FLATPAK_DEST}/include/wine/windows
      - -I../lsteamclient/steamworks_sdk_142
      - -L${FLATPAK_DEST}/lib32
      - -L${FLATPAK_DEST}/lib32/wine
      - -lsteam_api
      - -lole32
      - --guiexe
      - .
    make-args: *winemaker_m32_make_args
    no-make-install: true
    post-install:
      - install -Dm755 steam_helper.exe.so ${FLATPAK_DEST}/lib32/wine/steam.exe.so
    sources:
      - *proton_source
      - type: file
        path: winemaker-configure.sh
        dest: steam_helper
        dest-filename: configure


  - name: openvr
    subdir: openvr
    buildsystem: cmake-ninja
    post-install:
      - install -Dm755 bin/win64/openvr_api.dll ${FLATPAK_DEST}/lib/wine/dxvk/openvr_api_dxvk.dll
      - install -Dm755 bin/win32/openvr_api.dll ${FLATPAK_DEST}/lib32/wine/dxvk/openvr_api_dxvk.dll
    sources: 
      - *proton_source


  - name: vrclient
    subdir: vrclient_x64/vrclient_x64
    build-options:
      config-opts:
        - -L${FLATPAK_DEST}/lib
        - -L${FLATPAK_DEST}/lib/wine
    config-opts: &vrclient_config_opts
      - --nosource-fix
      - --nolower-include
      - --nodlls
      - --nomsvcrt
      - -I${FLATPAK_DEST}/include
      - -I${FLATPAK_DEST}/include/wine
      - -I${FLATPAK_DEST}/include/wine/windows
      - -I.
      - -I..
      - --dll
      - .
    make-args:
      - LIBRARIES=-ldl
    build-commands:
      - winebuild --dll --fake-module -E vrclient_x64.spec -o vrclient_x64.dll.fake
    no-make-install: true
    post-install:
      - install -Dm755 vrclient_x64.dll.so ${FLATPAK_DEST}/lib/wine/vrclient_x64.dll.so
      - install -Dm755 vrclient_x64.dll.fake ${FLATPAK_DEST}/lib/wine/fakedlls/vrclient_x64.dll
    sources: &vrclient_sources
      - *proton_source
      - type: file
        path: winemaker-configure.sh
        dest: vrclient_x64/vrclient_x64
        dest-filename: configure

  - name: vrclient-32bit
    subdir: vrclient_x64/vrclient_x64
    only-arches:
      - x86_64
    build-options:
      arch:
        x86_64: *compat_i386_opts
      config-opts:
        - -L${FLATPAK_DEST}/lib32
        - -L${FLATPAK_DEST}/lib32/wine
        - --wine32
      make-args: *winemaker_m32_make_args
    make-args:
      - LIBRARIES=-ldl
    config-opts: *vrclient_config_opts
    build-commands:
      - winebuild --dll --fake-module -E vrclient_x64.spec -o vrclient_x64.dll.fake
    no-make-install: true
    post-install:
      - install -Dm755 vrclient_x64.dll.so ${FLATPAK_DEST}/lib32/wine/vrclient.dll.so
      - install -Dm755 vrclient_x64.dll.fake ${FLATPAK_DEST}/lib32/wine/fakedlls/vrclient.dll
    sources: *vrclient_sources


  - name: vkd3d-proton
    subdir: vkd3d-proton
    buildsystem: meson
    build-options:
      config-opts:
        - --cross-file=../build-win64.txt
        - --cross-file=../meson-ccache-mingw64.txt
        - --libdir=lib/wine/vkd3d-proton
        - --bindir=lib/wine/vkd3d-proton
    config-opts: &vkd3d-proton-config-opts
      - --buildtype=release
      - --strip
      - -Denable_standalone_d3d12=true
    post-install:
      - cd ${FLATPAK_BUILDER_BUILDDIR}; git submodule status -- vkd3d-proton > ${FLATPAK_DEST}/lib/wine/vkd3d-proton/version
    sources: &vkd3d-proton-sources
      - *proton_source
      - type: file
        dest: vkd3d-proton
        path: meson-ccache-mingw32.txt
      - type: file
        dest: vkd3d-proton
        path: meson-ccache-mingw64.txt

  - name: vkd3d-proton-32bit
    subdir: vkd3d-proton
    buildsystem: meson
    build-options:
      config-opts:
        - --cross-file=../build-win32.txt
        - --cross-file=../meson-ccache-mingw32.txt
        - --libdir=lib32/wine/vkd3d-proton
        - --bindir=lib32/wine/vkd3d-proton
    config-opts: *vkd3d-proton-config-opts
    post-install:
      - cd ${FLATPAK_BUILDER_BUILDDIR}; git submodule status -- vkd3d-proton > ${FLATPAK_DEST}/lib32/wine/vkd3d-proton/version
    sources: *vkd3d-proton-sources


  - name: dxvk
    subdir: dxvk
    buildsystem: meson
    build-options: &dxvk_64_build_options
      config-opts:
        - --cross-file=../build-win64.txt
        - --cross-file=../meson-ccache-mingw64.txt
        - --libdir=lib/wine/dxvk
        - --bindir=lib/wine/dxvk
    config-opts: &dxvk_config_opts
      - --buildtype=release
      - --strip
      - -Denable_tests=false
      - -Denable_dxgi=true
      - -Denable_d3d9=true
      - -Denable_d3d10=true
      - -Denable_d3d11=true
    post-install:
      - cd ${FLATPAK_BUILDER_BUILDDIR}; git submodule status -- dxvk > ${FLATPAK_DEST}/lib/wine/dxvk/version
      - ln -s version ${FLATPAK_DEST}/lib/wine/dxvk/d9vk_version
    sources: &dxvk_sources
      - *proton_source
      - type: file
        dest: dxvk
        path: meson-ccache-mingw32.txt
      - type: file
        dest: dxvk
        path: meson-ccache-mingw64.txt

  - name: dxvk-32bit
    subdir: dxvk
    buildsystem: meson
    build-options: &dxvk_32_build_options
      config-opts:
        - --cross-file=../build-win32.txt
        - --cross-file=../meson-ccache-mingw32.txt
        - --libdir=lib32/wine/dxvk
        - --bindir=lib32/wine/dxvk
    config-opts: *dxvk_config_opts
    post-install:
      - cd ${FLATPAK_BUILDER_BUILDDIR}; git submodule status -- dxvk > ${FLATPAK_DEST}/lib32/wine/dxvk/version
      - ln -s version ${FLATPAK_DEST}/lib32/wine/dxvk/d9vk_version
    sources: *dxvk_sources


  - name: wine-mono-bin
    buildsystem: simple
    build-commands:
      - mkdir -p ${FLATPAK_DEST}/share/wine/mono
      - cp -a . ${FLATPAK_DEST}/share/wine/mono/wine-mono-5.1.1
    sources:
      - type: archive
        url: "https://github.com/madewokherd/wine-mono/releases/download/wine-mono-5.1.1/wine-mono-5.1.1-x86.tar.xz"
        sha256: b17ac815afbf5eef768c4e8d50800be02af75c8b230d668e239bad99616caa82


  - name: wine-gecko-bin
    buildsystem: simple
    build-commands:
      - mkdir -p ${FLATPAK_DEST}/share/wine/gecko
      - |
        for a in wine-gecko-*-x86{,_64}.tar.bz2; do
          tar -xf "$a" -C ${FLATPAK_DEST}/share/wine/gecko/
        done
    sources:
      - type: file
        url: "https://dl.winehq.org/wine/wine-gecko/2.47.1/wine-gecko-2.47.1-x86.tar.bz2"
        sha256: 06a00cedf391ee07bbca0b3282e5c8ad9d950446d50648d2ff417716816fd1ab
      - type: file
        url: "https://dl.winehq.org/wine/wine-gecko/2.47.1/wine-gecko-2.47.1-x86_64.tar.bz2"
        sha256: ea5246e4c91d1aa1226658e1749b6e5d0e9353b52b14df79c4b93b6e61a3c59e


  - name: fonts
    buildsystem: autotools
    no-autogen: true
    make-args:
      - fonts
    no-make-install: true
    post-install:
      - find obj-fonts/ -xtype f \( -name "*.otf" -o -name "*.ttf" \) -ls -exec install -Dm0644 -t ${FLATPAK_DEST}/share/fonts/ {} \;
    sources:
      - *proton_source
      - type: shell
        commands:
          - ./configure.sh --no-steam-runtime
    modules:

      - name: fontforge
        buildsystem: cmake-ninja
        builddir: true
        config-opts:
          - -DCMAKE_BUILD_TYPE=Release
          - -DBUILD_SHARED_LIBS=OFF
          - -DENABLE_GUI=OFF
          - -DENABLE_NATIVE_SCRIPTING=ON
          - -DENABLE_PYTHON_SCRIPTING=OFF
          - -DENABLE_PYTHON_EXTENSION=OFF
          - -DENABLE_LIBSPIRO=OFF
          - -DENABLE_LIBUNINAMESLIST=OFF
          - -DENABLE_LIBGIF=OFF
          - -DENABLE_LIBJPEG=OFF
          - -DENABLE_LIBPNG=OFF
          - -DENABLE_LIBREADLINE=OFF
          - -DENABLE_LIBTIFF=OFF
          - -DENABLE_WOFF2=OFF
          - -DENABLE_DOCS=OFF
        cleanup:
          - "*"
        sources:
          - type: archive
            url: "https://github.com/fontforge/fontforge/releases/download/20201107/fontforge-20201107.tar.xz"
            sha256: 68bcba8f602819eddc29cd356ee13fafbad7a80d19b652d354c6791343476c78

      - files/afdko/python3-requirements-dev.json
      - files/afdko/python3-requirements.json


  - name: default-prefix
    build-options:
      env:
        WINEPREFIX: /app/share/steam/compatibilitytools.d/Proton/share/default_pfx
        LC_ALL: C
    buildsystem: simple
    build-commands:
      #FIXME unclever way to wait for all child procs
      - strace -e trace=none -f wine wineboot


  - name: proton
    buildsystem: simple
    build-commands:
      - install -Dm755 -t ${FLATPAK_DEST}/
          proton
          filelock.py
          user_settings.sample.py
      - install -Dm644 -t ${FLATPAK_DEST}/
          compatibilitytool.vdf
          proton_3.7_tracked_files
      - install -Dm644 toolmanifest_noruntime.vdf ${FLATPAK_DEST}/toolmanifest.vdf
      - install -Dm644 dist.LICENSE ${FLATPAK_DEST}/LICENSE
      - |
        set -e -o pipefail
        PROTON_VERSION=$(git describe --tags | sed 's/^proton-//')
        PROTON_DATE=$(git show -s --format=%cs)
        TIMESTAMP=$(date +%s)
        echo ${TIMESTAMP} proton_flatpak-${PROTON_VERSION} > ${FLATPAK_DEST}/version
        sed \
          -e "s/@VERSION@/${PROTON_VERSION}/g" \
          -e "s/@BUILD@/${TIMESTAMP}/g" \
          -i ${FLATPAK_DEST}/compatibilitytool.vdf
        sed \
          -e "s/@VERSION@/${PROTON_VERSION}/g" \
          -e "s/@DATE@/${PROTON_DATE}/g" \
          -i ${FLATPAK_ID}.metainfo.xml
      - |
        cd ${FLATPAK_DEST}
        mkdir dist
        ln -s ../bin dist/bin
        ln -s ../lib dist/lib64
        ln -s ../lib32 dist/lib
        ln -s ../share dist/share
        ln -s ../version dist/version
      - install -Dm644 -t ${FLATPAK_DEST}/share/metainfo ${FLATPAK_ID}.metainfo.xml
      - appstream-compose --basename=${FLATPAK_ID} --prefix=${FLATPAK_DEST} --origin=flatpak ${FLATPAK_ID}
    sources:
      - *proton_source
      - type: patch
        paths:
          - patches/proton/flatpak.patch
          - patches/proton/keep-system-gstreamer-plugins.patch
      - type: file
        path: compatibilitytool.vdf
      - type: file
        path: com.valvesoftware.Steam.CompatibilityTool.Proton.metainfo.xml
